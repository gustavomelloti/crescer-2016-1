create or replace PACKAGE BODY PCK_CONCURSO is

  /* Conforme especificacao deve gerar 1 registro na tabela concurso */
  PROCEDURE geraProximoConcurso AS
       VVALORCONCURSO NUMBER(12,2);
       VVALORCONCURSOSENA NUMBER(12,2);
       VIDULTIMOCONCURSO INTEGER;
       VULTIMOCONCURSOACUMULOU INTEGER;
       VDATAULTIMOSORTEIO DATE;
    BEGIN
      
        --RETORNA OS DADOS DO ÚLTIMO CONCURSO
        SELECT DATA_SORTEIO, IDCONCURSO, ACUMULOU, PREMIO_SENA
          INTO VDATAULTIMOSORTEIO, VIDULTIMOCONCURSO,VULTIMOCONCURSOACUMULOU, VVALORCONCURSOSENA
          FROM CONCURSO
          WHERE ROWNUM = 1
          ORDER BY IDCONCURSO DESC;
       
      --RETORNA O TOTAL DE ARRECADAÇÃO DA ÚLTIMA APOSTA
        SELECT SUM(VALOR)
          INTO VVALORCONCURSO
          FROM APOSTA
          WHERE IDCONCURSO = VIDULTIMOCONCURSO;
       
       --VERIFICA SE ACUMULOU, SE ACUMULOU SOMA O VALOR DA SENA DO ÚLTIMO
       IF (VULTIMOCONCURSOACUMULOU > 0) THEN
          VVALORCONCURSO := VVALORCONCURSO + VVALORCONCURSOSENA;
       END IF;
       
       -- FORMULA A DATA DO NOVO SORTEIO  
       IF (TO_CHAR(VDATAULTIMOSORTEIO, 'D') = 7) THEN
          VDATAULTIMOSORTEIO := VDATAULTIMOSORTEIO + 4;
       ELSE 
          VDATAULTIMOSORTEIO := VDATAULTIMOSORTEIO + 3;
       END IF;
        
        -- SALVA O CONCURSO
        PCK_MEGASENA.SALVACONCURSO(VIDULTIMOCONCURSO + 1, VDATAULTIMOSORTEIO, VVALORCONCURSO * 0.453);
    end;
  ----------------------------------------------------------------------
  /* Conforme especificacao deve atualizar a tabela de acertadores */    
  procedure atualizaAcertadores(PIDCONCURSO IN INTEGER) as
      -- VALORES DOS PREMIOS DO SORTEIO
      VALORPREMIOSENA NUMERIC(12,2);
      VALORPREMIOQUINA NUMERIC(12,2);
      VALORPREMIOQUADRA NUMERIC(12,2);
      
      -- QUANTIDADE DE GANHADOR DO SORTEIO
      QTDGANHADORESSENA INTEGER := 0;
      QTDGANHADORESQUINA INTEGER := 0;
      QTDGANHADORESQUADRA INTEGER := 0;
      
      -- ARRAY PARA OS GANHADORES
      TYPE TABELAGANHADORES IS TABLE OF INTEGER
          INDEX BY BINARY_INTEGER; 
    
      GANHADORESQUADRA TABELAGANHADORES;
      GANHADORESQUINA  TABELAGANHADORES; 
      GANHADORESSENA  TABELAGANHADORES; 
      
      -- ARRAY PARA OS GANHADORES
      INDICEQUADRA INTEGER := 1;
      INDICEQUINA INTEGER := 1;
      INDICESENA INTEGER := 1;
      
      -- CURSOR COM OS GANHADORES
      CURSOR P_GANHADORES IS
          SELECT APOSTA.IDAPOSTA, COUNT(*) QUANTIDADEACERTOS
          FROM CONCURSO
          INNER JOIN APOSTA ON APOSTA.IDCONCURSO =  CONCURSO.IDCONCURSO
          INNER JOIN NUMERO_APOSTA ON NUMERO_APOSTA.IDAPOSTA = APOSTA.IDAPOSTA  AND NUMERO_APOSTA.NUMERO IN (CONCURSO.PRIMEIRA_DEZENA, CONCURSO.SEGUNDA_DEZENA, CONCURSO.TERCEIRA_DEZENA, CONCURSO.QUARTA_DEZENA, CONCURSO.QUINTA_DEZENA, CONCURSO.SEXTA_DEZENA)
          WHERE CONCURSO.IDCONCURSO = PIDCONCURSO
          GROUP BY (APOSTA.IDAPOSTA)
          HAVING COUNT(*) > 3;  
    BEGIN
        
        -- PEGA OS VALORES DOS PRÊMIOS
        SELECT PREMIO_SENA, PREMIO_QUINA, PREMIO_QUADRA
          INTO VALORPREMIOQUADRA, VALORPREMIOQUINA,VALORPREMIOSENA
          FROM CONCURSO
          WHERE IDCONCURSO = PIDCONCURSO;
          
          -- GUARDA OS GANHADORES POR SENA, QUINA E QUADRA
          FOR GAN IN P_GANHADORES LOOP
              IF (GAN.QUANTIDADEACERTOS = 4) THEN
                  GANHADORESQUADRA(INDICEQUADRA) := GAN.IDAPOSTA;
                  INDICEQUADRA := INDICEQUADRA + 1;
              ELSIF (GAN.QUANTIDADEACERTOS = 5) THEN
                  GANHADORESQUINA(INDICEQUINA) := GAN.IDAPOSTA;
                  INDICEQUINA := INDICEQUINA + 1;
              ELSIF (GAN.QUANTIDADEACERTOS = 6) THEN
                  GANHADORESSENA(INDICESENA) := GAN.IDAPOSTA;
                  INDICESENA := INDICESENA + 1;
              END IF;
          END LOOP;

         -- VERIFICA OS GANHADORES DA QUADRA
        IF (GANHADORESQUADRA.COUNT > 0) THEN
          QTDGANHADORESQUADRA := GANHADORESQUADRA.COUNT;
          for i in 1..GANHADORESQUADRA.count loop
             INSERT INTO APOSTA_PREMIADA (IDAPOSTA_PREMIADA, IDAPOSTA, ACERTOS, VALOR) VALUES (SQAPOSTA_PREMIADA.NEXTVAL, GANHADORESQUADRA(i), 4, VALORPREMIOQUADRA / QTDGANHADORESQUADRA);
          END LOOP;
        END IF;
        
         -- VERIFICA OS GANHADORES DA QUINA
        IF (GANHADORESQUINA.COUNT > 0) THEN
          QTDGANHADORESQUINA := GANHADORESQUINA.COUNT;
          for i in 1..GANHADORESQUINA.count loop
             INSERT INTO APOSTA_PREMIADA (IDAPOSTA_PREMIADA, IDAPOSTA, ACERTOS, VALOR) VALUES (SQAPOSTA_PREMIADA.NEXTVAL, GANHADORESQUINA(i), 5, VALORPREMIOQUINA / QTDGANHADORESQUINA);
          END LOOP;
        END IF;
        
         -- VERIFICA OS GANHADORES DA SENA
        IF (GANHADORESSENA.COUNT > 0) THEN
          QTDGANHADORESSENA := GANHADORESSENA.COUNT;
          for i in 1..GANHADORESSENA.count loop
             INSERT INTO APOSTA_PREMIADA (IDAPOSTA_PREMIADA, IDAPOSTA, ACERTOS, VALOR) VALUES (SQAPOSTA_PREMIADA.NEXTVAL, GANHADORESSENA(i), 6, VALORPREMIOSENA / QTDGANHADORESSENA);
          END LOOP;
        ELSE
            UPDATE CONCURSO SET ACUMULOU = 1 WHERE IDCONCURSO = PIDCONCURSO;
        END IF;
      END;

END PCK_CONCURSO;